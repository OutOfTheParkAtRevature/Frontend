trigger:
- staging

pr:
- staging

variables:
  frontendRepository: 'frontend'
  tag: 'latest'
  imagePullSecret: 'frontend'


stages:
  - stage: analyze
    displayName: Analyze
    jobs:
      - job: analyze
        pool:
          vmImage: ubuntu-latest
        steps:
          - task: Npm@1
            displayName: Install Dependencies
            inputs:
              command: install
          - task: SonarCloudPrepare@1
            inputs:
              SonarCloud: 'sonarcloud connection'
              scannerMode: CLI
              organization: 121420-dotnet-sonarcloud
              configFile: sonar-project.properties
          - task: Npm@1
            displayName: Analyze Build
            inputs:
              command: custom
              customCommand: run build -- --prod
          - task: Npm@1
            displayName: Analyze Tests
            inputs:
              command: custom
              customCommand: run test-headless -- --code-coverage
          - task: PublishCodeCoverageResults@1
            displayName: Publish Code Coverage
            inputs:
              codeCoverageTool: Cobertura
              summaryFileLocation: coverage/cobertura-coverage.xml
              reportDirectory: coverage
              failIfCoverageEmpty: true
          - task: SonarCloudAnalyze@1
            displayName: Run Code Analysis
          - task: SonarCloudPublish@1
            displayName: Publish Code Analysis


  - stage: 'Build'
    displayName: Build and push
    jobs:
      - job: Build
        pool:
          vmImage: ubuntu-latest
        steps:
          - task: Docker@2
            inputs:
              command: buildAndPush
              buildContext: $(Build.Repository.LocalPath)
              repository: $(frontendRepository)
              dockerfile: '$(Build.SourcesDirectory)/Dockerfile'
              containerRegistry: 'Container Registry Connection'
              tags: |
                $(tag)

          - publish: '$(Build.SourcesDirectory)/manifests'
            artifact: manifests
  - stage: 'Deploy'
    displayName: 'Deploy the containers'
    dependsOn: Build
    jobs:
    - deployment: Deploy
      displayName: Deploy
      pool:
        vmImage: 'ubuntu-latest'
      environment: 'spike.default'
      variables:
      - group: Release
      strategy:
        runOnce:
          deploy:
            steps:
            - download: current
              artifact: manifests

            - task: KubectlInstaller@0
              inputs:
                kubectlVersion: 'latest'
            - task: Kubernetes@1
              inputs:
                connectionType: 'Kubernetes Service Connection'
                kubernetesServiceEndpoint: 'Kubernetes Cluster Connection'
                namespace: 'default'
                command: 'login'

            - task: KubernetesManifest@0
              displayName: Create imagePullSecret
              inputs:
                action: createSecret
                secretName: $(imagePullSecret)
                dockerRegistryEndpoint: 'Container Registry Connection'
                kubernetesServiceConnection: 'Kubernetes Cluster Connection'
                namespace: 'default'

            - task: KubernetesManifest@0
              displayName: Deploy to Kubernetes cluster
              inputs:
                action: deploy
                kubernetesServiceConnection: 'Kubernetes Cluster Connection'
                namespace: 'default'
                manifests: |
                  $(Pipeline.Workspace)/manifests/deployment.yml
                imagePullSecrets: |
                  $(imagePullSecret)
                containers: |
                  $(RegistryName)/$(frontendRepository):$(tag)
            - task: Kubernetes@1
              inputs:
                command: 'logout'
